---
layout: post
title:  "[SQL] 데이터 모델과 성능"
date:   2015-05-16 00:00:00
categories: jekyll update
---

이 포스트는 "SQL 전문가 가이드"의 "2장. 데이터과 성능"를 학습한 내용으로 이루어져 있습니다. 

---

# 성능 데이터 모델링의 개요

**성능 데이터 모델링이란?**  
성능 데이터 모델링이란 데이터베이스 성능향상을 목적으로 설계단계의 데이터 모델링 때부터 정규화, 반정규화, 테이블통합, 테이블분할, 조인구조, PK, FK 등 여러 가지 성능과 관련된 사항이 데이터 모델링에 반영될 수 있도록 하는 것을 의미한다.

**성능 데이터 모델링 수행시점**  
성능 향상을 위한 비용은 프로젝트 수행 중에 있어서 사전에 할수록 비용이 들지 않는다. 특히 분석/설계 단계에서 데이터 모델에 성능을 고려한 데이터 모델링을 수행할 경우 성능저하에 따른 재업무 비용을 최소화 할 수 있는 기회를 가지게 된다.


**성능 데이터 모델링 고려사항**  
성능 데이터 모델링을 수행할 때 다음과 같은 프로세스로 진행하면 좋다.  
1. 데이터 모델링을 할 때 정규화를 정확하게 수행한다.  
2. 데이터베이스 용량산정을 수행한다.  
3. 데이터베이스에 발생하는 트랜잭션의 유형을 파악한다.  
4. 용량과 트랜잭션의 유형에 따라 반정규화를 수행한다.  
5. 이력모델의 조정, PK/FK 조정, 슈퍼타입/서브타입 조정 등을 수행한다.  
6. 성능관점에서 데이터 모델을 검증한다.

---

# 정규화와 성능

데이터 모델링을 하면서 정규화를 하는 것은 기본적으로 데이터에 대한 중복성을 제거하여 주고, 데이터가 관심사별로 처리되는 경우가 많기 때문에 성능이 향상되는 특징을 가지고 있다. 엔티티가 계속 발생되므로 SQL문장에서 조인이 많이 발생하여 이로 인한 성능저하가 나타나는 경우도 있지만 이런 부분은 사례별로 유의하여 반정규화를 적용하는 전략이 필요하다.  

일반적으로 정규화가 잘 되어 있으면 입력/수정/삭제의 성능이 향상되고 반정규화를 많이 하면 조회의 성능이 향상된다고 인식한다. 그러나 데이터 모델링을 할 때 반정규화만이 조회 성능을 향상시킨다는 고정관념은 탈피되어야 한다. 정규화를 해서 성능이 저하되기는 커녕 정규화를 해야만 성능이 향상되는 경우도 있기 때문이다.

**함수적 종속성(Functional Dependency)에 근거한 정규화 수행 필요**  
함수의 종속성은 데이터들이 어떤 기준값에 의해 종속되는 현상을 지칭하는 것이다. 
이 때 기준 값을 결정자(Determinant)라 하고 종속되는 값을 종속자(Dependent)라고 한다. 
함수의 종속성은 데이터가 가지고 있는 근본적인 속성으로 인식되고 있다.
정규화의 목적은 반복적인 데이터를 분리하고 각 데이터가 종속된 테이블에 적절하게 배치되도록 하기 위함이다.
그러므로 정규화는 데이터 속성간의 함수종속성에 근거하여 이루어져야 한다.

----

# 참고자료  
[데이터 베이스 정규화에 대한 기본 사항, 마이크로소프트 페이지](https://support.microsoft.com/en-us/kb/283878/ko)  

**제 1정규형**

* 개별 테이블에서 반복되는 그룹을 제거한다.
* 관련 데이터의 각 집합에 대해 별도의 테이블을 만든다.
* 기본 키를 사용하여 관련 데이터의 각 집합을 식별한다.

**제 2정규형**

* 여러 레코드에 적용되는 값 집합에 대해 별도의 테이블을 만든다.
* 이러한 테이블을 연결할 때는 외래 키를 사용한다.

**제 3정규형**

* 키에 종속되지 않는 필드를 제거한다.

---

# 반정규화와 성능

**반정규화(De-Normalization)란?**  
반정규화를 정의하면 정규화된 엔티티, 속성, 관계에 대해 시스템의 성능향상과 개발과 운영의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링의 기법을 의미한다. 
좁은 의미의 반정규화는 데이터를 중복하여 성능을 향상시키기 위한 기법이라고 정의할 수 있고 조금 더 넓은 의미의 반정규화는 성능을 향상시키기 위해 정규화된 데이터 모델에서 중복, 통합, 분리 등을 수행하는 모든 과정을 의미한다.

**반정규화의 적용방법**  

방정규화를 적용할 때는 기본적으로 데이터 무결성이 깨질 가능성이 많이 있기 때문에 반드시 데이터 무결성을 보장할 수 있는 방법을 고려하여 적용해야 한다. 
정규화와 반정규화 사이에는 Trade-Off 관계로 정규화만을 강조하다 보면 성능 이슈가, 반정규화만을 강조하다 보면 데이터 무결성에 관한 이슈가 생길 수 있다.

1. 반정규화 대상 조사: 범위 처리 빈도 수 조사, 대량의 범위 처리 조사, 통계성 프로세스 조사, 테이블 조인 개수  
2. 다른 방법유도 검토: 뷰(VIEW) 테이블, 클러스터링 적용, 인덱스의 조정, 응용 어플리케이션  
3. 반정규화 적용: 테이블 반정규화, 속성의 반정규화, 관계의 반정규화 

**반정규화의 기법**  

테이블의 반정규화

| 기법 분류 | 기법 | 내용 | 
| 테이블 병합 | 1:1 관계 테이블 병합 | 1:1 관계를 통하여 성능 향상 |
| | 1:M 관계 테이블 병합 | 1:M 관계 통합하여 성능 향상  | 
| | 슈퍼/서브타입 테이블 병합 | 슈퍼/서브 관계를 통합하여 성능 향상 |
| 테이블 분할 | 수직 분할 | 칼럼 단위의 테이블을 디스크 I/O 분산처리 하기 위해 테이블을 1:1로 분리하여 성능 향상(트랜잭션 유형 파악이 선행되어야 함)
| | 수평 분할 | 로우 단위로 집중 발생되는 트랜잭션을 분석하여 디스크 I/O 및 데이터 접근의 효율성을 높여 성능을 향상하기 위해 로우단위로 테이블을 쪼갬
| 테이블 추가 | 중복 테이블 추가 | 다른 업무이거나 서버가 다른 경우 동일한 테이블구조를 중복하여 원격조인을 제거하여 성능을 향상 | 
| | 통계 테이블 추가 | SUM, AVG 등을 미리 수행하여 계산해 둠으로써 조회 시 성능을 향상 | 
| | 이력 테이블 추가 | 이력테이블 중에서 마스터 테이블에 존재하는 레코드를 중복하여 이력테이블에 존재하는 방법은 반정규화의 유형 | 
| | 부분 테이블 추가 | 하나의 테이블의 전체 칼럼 중 자주 이용하는데 자주 이용하는 집중화된 칼럼들이 있을 때 디스크 I/O를 줄이기 위해 해당 칼럼들을 모아놓은 별도의 반정규화된 테이블을 생성 | 

칼럼의 반정규화 

| 반정규화 기법 | 내용 |
| 중복 칼럼 추가 | 조인에 의해 처리할 때 성능 저하를 예방하기 위해 즉, 조인을 감소시키기 위해 중복된 칼럼을 위치시킴 | 
| 파생 칼럼 추가 | 트랜잭션이 처리되는 시점에 계산에 의해 발생되는 성능저하를 예방하기 위해 미리 값을 계산하여 칼럼에 보관함. Derived Column이라고 함 |
| 이력 테이블 칼럼 추가 | 대량의 이력데이터를 처리할 때 불특정 날 조회나 최근 값을 조회할 때 나타날 수 있는 성능저하를 예방하기 위해 이력테이블에 기능성 칼럼(최근값 여부, 시작과 종료일자 등)을 추가함
| PK에 의한 칼럼 추가 | 복합 의미를 갖는 PK를 단일 속성으로 구성하였을 경우 발생됨. 단일 PK 안에서 특정 값을 별도로 조회하는 경우 성능저하가 발생될 수 있음. 이 때 이미 PK안에 데이터가 존재하지만 성능 향상을 위해 일반 속성으로 포함하는 방법 |
| 응용시스템 오작동을 위한 칼럼 추가 | 업무적으로는 의미가 없지만 사용자가 데이터처리를 하다가 잘못 처리하여 원래 값으로 복구하기를 원하는 경우 이전 데이터를 임시적으로 중복하여 보관하는 기법. 칼럼으로 이것을 보관하는 방법은 오작동 처리를 위한 임시적인 기법이지만 이것을 이력 데이터 모델로 풀어내면 정상적인 데이터 모델의 기법이 될 수 있음 | 

관계 반정규화

| 반정규화 기법 | 내용 |
| 중복관계 추가 | 데이터를 처리하기 위해 여러 경로를 거쳐 조인이 가능하지만 이 때 발생할 수 있는 성능저하를 예방하기 위해 추가적인 관계를 맺는 방법이 관계의 반정규화임 | 


---

출처: `"SQL 전문가 가이드, 2013 Edition", 서강수, 한국데이터베이스진흥원, 2013` 
